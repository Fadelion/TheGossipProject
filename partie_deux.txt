2. Deuxième partie du projet
2.1. Bases de données
Rajoute, dans les models, des validations aux attributs importants l'application.
Exemple:
- la présence du 'title' est obligatoire, ce dernier ne peut pas faire moins de 3 caractères ni plus de 14 caractères
- la présence du 'content' est obligatoire

2.2. Création de potin
À partir de la page d'accueil qui recense tous les potins, l'application va inviter l'utilisateur à enregistrer son propre potin. En cliquant sur un lien, il va se retrouver sur une page contenant un formulaire de création de potin. Ce formulaire va demander le titre du potin, ainsi que son contenu. Une fois soumis, le formulaire va enregistrer le potin en base et l'utilisateur va être redirigé vers la page d'accueil.
Implémente également quelques concepts tels que le helper form_tag de Rails et les alertes.

2.2.1. Préparation des routes, du controller et de la view
Pour créer un potin, il est nécessaire d'avoir un controller gossips contenant les méthodes #new et #create. Il faut également les routes (en mode REST) qui pointent vers ces 2 méthodes. Pour finir, il te faut la view qui va afficher le formulaire : gossips/new.html.erb. À noter qu'il n'existe pas de view create.html.erb : la méthode #create renvoie vers l'index.
Reécris si possible toutes les routes en 'resources'.

2.2.2. Formulaire de création
Créé le formulaire de création de potins dans la view new.html.erb en utilisant form_tag, très adapté quand on débute.
Ton formulaire doit demander le title ainsi que le content du potin que tu vas créer. Bien entendu, quand on valide le formulaire, ce dernier doit partir à la méthode #create de ton controller de potins.

2.2.3. Controller
2.2.3.1. def create
Le résultat que l'on veut, en termes d'expérience utilisateur, est le suivant :
- L'utilisateur est sur une magnifique page où il doit remplir un formulaire. Il le remplit et le soumet.
- De là, 2 cas sont possibles:
  * Si le contenu du formulaire est accepté et que l'objet est bien créé en base, l'utilisateur est redirigé vers une nouvelle page HTML avec, en haut, un bandeau VERT disant un truc du genre "Le potin a été sauvegardé avec succès !"
  * Si le contenu du formulaire est refusé (objet non créé en base, car il manque un champ ou alors le contenu n'est pas valide, etc.), l'utilisateur retourne à nouveau sur la page du formulaire avec, en haut, un bandeau ROUGE disant un message d'erreur.
  
Le boulot du controller est d'arriver à coordonner ceci. En gros, il va faire la chose suivante :
- Il va récupérer les informations du formulaire et essayer d'en faire une instance de ton model et de la sauver.
- le model va soit dire "tout va bien j'ai réussi à créer mon instance" ou alors il va dire "ROLLBACK" "hey ! les validations ne sont pas passées, je te renvoie une ou plusieurs erreurs"
- Si l'instance est sauvegardée en base de données, le controller va rediriger vers la page index.
- Si le model n'arrive pas à sauvegarder l'instance, il va rester sur la page du formulaire pour que l'utilisateur ré-essaye de le remplir sans erreur.

Pour le moment nous ne gérons pas l'authentification des utilisateurs. Or chaque potin doit avoir un auteur en base ! Pour pallier à ça, nous allons faire une petite astuce : tu vas créer (en console) un utilisateur nommé anonymous puis faire en sorte que tous les potins créés dans la view new soient systématiquement associés à cet utilisateur.

2.3 Le CRUD
Rajoute la ville de l'auteur dans la page spécifique du potin.
2.3.1. Hot city
La page pour afficher le détail d'une ville. Cette page devra afficher :
- Le nom de la ville
- Les potins écrits par les utilisateurs associés à la ville en question (faire une liste comme celle de la page d'accueil)
La page ville doit être accessible depuis la page utilisateur (lien vers la ville de l'utilisateur) et depuis la page potin (lien vers la ville de l'auteur).

2.3.2. Edit / Update
Maintenant nous allons faire en sorte de pouvoir éditer les potins.
Pour ceci, nous allons faire une page /gossips/:id/edit qui affichera un formulaire pour éditer le potin. Ce formulaire devra pointer vers la méthode #update qui aura pour rôle d'actualiser le potin en BDD.
Astuce : essaye de pré-remplir les champs du formulaire d'édition avec les informations du potin. Ainsi, l'utilisateur n'a qu'à changer les quelques infos qu'il souhaite : pas besoin de tout retaper.

2.3.3. Détruire
À partir de la page potin, il est possible de détruire le potin avec un lien pour le faire. Implémente cette fonctionnalité. Après avoir détruit le potin, l'utilisateur doit être redirigé vers l'index des potins.

2.3.4. Les commentaires de potins
Ce site de gossips ne serait pas complet sans une section de commentaires où les gens pourraient commenter les ragots des participants. Nous allons donc ajouter une fonctionnalité de commentaires à nos chers gossips.
Ci-dessous le détail du processus:
2.3.4.1. Création
Un commentaire peut être ajouté à un potin uniquement depuis la page show de ce dernier. La page contiendra donc un formulaire pour renseigner le texte du commentaire. Tout comme pour les potins, si un nouveau commentaire est rajouté via ce formulaire il sera assigné à notre utilisateur anonyme (pour le moment).
La page show du gossip affichera tous les commentaires liés à ce gossip, dans l'ordre que nous voulons. Pour chaque commentaire, on pourra lire son auteur (ça ne sera pas forcément ton utilisateur anonyme), son texte, et on disposera d'un lien pour le modifier.
2.3.4.2. Modification et destroy
Crée la page edit du commentaire (page pour le modifier). Cette page permettra également de détruire le commentaire via un bouton.
2.3.4.3. Compter les commentaires
Dans la page d'index, chaque potin affiche le nombre de commentaires qui lui sont liés.

2.4. Les tags
Nous allons coder le fait de pouvoir ajouter un tag à la création du potin. Pour ceci, voici comment tu vas faire :
- Dans le seed, tu vas créer une dizaine de tags sympathiques.
- Dans ton formulaire de création de potin, tu vas ajouter un select form où tu pourras sélectionner un tag parmi tous les tags que tu as en base. Deux options pour ça : soit tu le construis toi-même en HTML, soit tu utilises le helper select_tag (lié à un form_tag).
- C'est le controller qui devra mettre à disposition de la view un array contenant tous les tags existant
- Possibilité d'ajouter plusieurs tags à un potin, n'hésite pas à regarder le concept des nested forms. Une fois que tu as rajouté cette fonctionnalité à la création d'un potin, ajoute-la aussi lors de l'édition du potin.
